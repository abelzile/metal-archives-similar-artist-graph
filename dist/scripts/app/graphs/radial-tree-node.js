define(["jquery","underscore"],function($,_){"use strict";function RadialTreeNode(data){this._data=data,this._children=[],this._angle=0,this._x=0,this._y=0,this._rightBisector=0,this._leftBisector=0,this._rightTangent=0,this._leftTangent=0,this._level=0,this._flatArrayCache=null,this._levelArrayCache=null}return Object.defineProperties(RadialTreeNode.prototype,{data:{get:function(){return this._data},enumerable:!0},children:{get:function(){return this._children},enumerable:!0},angle:{get:function(){return this._angle},set:function(val){this._angle=val},enumerable:!0},x:{get:function(){return this._x},set:function(val){this._x=val},enumerable:!0},y:{get:function(){return this._y},set:function(val){this._y=val},enumerable:!0},rightBisector:{get:function(){return this._rightBisector},set:function(val){this._rightBisector=val},enumerable:!0},leftBisector:{get:function(){return this._leftBisector},set:function(val){this._leftBisector=val},enumerable:!0},rightTangent:{get:function(){return this._rightTangent},set:function(val){this._rightTangent=val},enumerable:!0},leftTangent:{get:function(){return this._leftTangent},set:function(val){this._leftTangent=val},enumerable:!0},depth:{get:function(){var depth=1;return _.forEach(this._children,function(node){var childDepth=node.depth;childDepth>=depth&&(depth=childDepth+1)},this),depth},enumerable:!0},hasChildren:{get:function(){return null!==this._children&&this._children.length>0},enumerable:!0},leftLimit:{get:function(){return Math.min(this._leftBisector,this._leftTangent)},enumerable:!0},rightLimit:{get:function(){return Math.max(this._rightBisector,this._rightTangent)},enumerable:!0},level:{get:function(){return this._level},set:function(val){this._level=val},enumerable:!0}}),RadialTreeNode.prototype.addChild=function(node){this._children.push(node),this._flatArrayCache=null,this._levelArrayCache=null},RadialTreeNode.prototype.toFlatArray=function(){if(null!==this._flatArrayCache)return this._flatArrayCache;for(var arr=[this],stack=[this];stack.length>0;){var node=stack.pop();node.hasChildren&&_.forEach(node.children,function(child){arr.push(child),stack.push(child)},this)}return this._flatArrayCache=arr},RadialTreeNode.prototype.toLevelArray=function(){if(null!==this._levelArrayCache)return this._levelArrayCache;var levels=[];return levels[0]=[],levels[0].push([this]),this._toLevelArrayN(this,levels),this._levelArrayCache=levels},RadialTreeNode.prototype._toLevelArrayN=function(tree,levels){var children=tree.children;if(tree.hasChildren){var treeLevel=tree.level;void 0===levels[treeLevel]&&(levels[treeLevel]=[]),levels[treeLevel].push(_.map(children,function(node){return node})),_.forEach(children,function(node){this._toLevelArrayN(node,levels)},this)}},RadialTreeNode});